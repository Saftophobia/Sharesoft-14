<!-- 
  # Definition: If the profile is owned by the current entity and it hasn't completed its information that is based on its type, 
  # the entity is asked to fill the extra needed information.
  # Input: Void.
  # Output: Startup, investor, service params.
  # Author: Omar El Menawy.
-->

<% if @entity == current_entity %>
<<<<<<< HEAD
 <% if current_entity.type == 'Startup' && @entity.completed == nil %>
  Startup
  <%= form_for :startup, url: entity_create_startup_path(:startup, entity_id: params[:id]) do |entity| %>
   <div><%= entity.label :number_of_working_years %><br />
   <%= entity.text_field :number_of_working_years %></div><br>
   <div><%= entity.label :sector %><br />
   <%= entity.collection_select :sector, Startup::SECTORS, :to_s, :titleize %></div>
   <%= entity.submit "Insert" %>
   <% end %>
 <% elsif current_entity.type == 'Investor' && @entity.completed == nil %>
  Investor
  <%= form_for :investor, url: entity_create_investor_path(:investor, entity_id: params[:id]) do |entity| %>
   <div><%= entity.label :contact_information %><br />
   <%= entity.text_field :contact_information %></div><br>

   <div><%= entity.label :sector %><br />
   <%= entity.collection_select :sector, Investor::SECTORS, :to_s, :titleize %></div>
   <%= entity.submit "Insert" %>
  <% end %>
 <% elsif current_entity.type == 'Service' && @entity.completed == nil %>
  <%= form_for :service, url: entity_create_service_path(:service, entity_id: params[:id]) do |entity| %>
   <div><%= entity.label :sector %><br />
   <%= entity.collection_select :sector, Service::SECTORS, :to_s, :titleize %></div>
   <%= entity.submit "Insert" %>
  <% end %>
 <% end %>
<% end %>


<!-- 
  # Definition: This part shows a button that redirects the startup that owns this profile 
  # to its unachieved badges. If it has achieved new badges a pop up alert appears showing the badge image,
  # name, description and level. Moreover, a list of the highest level achieved badges in each category 
  # appear on the startup profile.
  # Input: @all_achieved_badges, @recently_achieved_badges, @achieved_badges, entity id.
  # Output: entity id.
  # Author: Yomn El-Mistikawy. 
-->

<% if @entity.type == "Startup" %>
  <% if @entity == current_entity %> 
  <% if @recently_achieved_badges.size != 0 %>
    <% @recently_achieved_badges.each do |badge| %>
      <script>
        alert("Congratulations! You have achieved the badge: " + '<%= badge.name %>' + "\n Description: " + '<%= badge.description %>' + "\n Level: " + '<%= badge.level %>');
      </script>
    <% end %>
  <% end %> 
<% end %>
<% if @achieved_badges.size != 0 %>
  <h1> Achievements </h1>
  <% if @entity == current_entity %>
    <% if @all_achieved_badges.size != 25 %>
      <%= button_to 'View unachieved badges', entity_show_unachieved_badges_path(entity_id: params[:id]), :class => "button" %>
    <% end %>
  <% end %>
  <table>
    <tbody>
      <tr>
        <% @achieved_badges.each do |badge| %>
          <td width="22%">
            <% if badge.level == 1 %>
              <%= image_tag "Bronze_1.gif" %>
            <% else %>
              <% if badge.level == 2 %>
                <%= image_tag "Silver_1.gif" %>
              <% else %>
                <% if badge.level == 3 %>
                  <%= image_tag "Gold_1.gif" %>
                <% else %>
                  <%= image_tag "Platinum_1.gif" %>
                <% end %>
              <% end %>
            <% end %>
            <br>
            <label><font color="white">Name: </label>
            <%= badge.name %>
            <br>
            <label> Description: </label>
            <%= badge.description %>
          </td>
        <% end %>
      </tr> 
    </tbody>
  </table>
  <% end %> 
=======
  <% if current_entity.type == 'Startup' && @entity.completed == nil %>
   Startup
   <br><br>
   <%= form_for :startup, url: entity_create_startup_path(:startup, entity_id: params[:id]) do |entity| %>
    <div><%= entity.label :number_of_working_years %>
     <%= entity.text_field :number_of_working_years %></div><br>
    <div><%= entity.label :sector %>
     <%= entity.collection_select :sector, Startup::SECTORS, :to_s, :titleize %></div><br>
    <%= entity.label :verification_code %>
    <%= entity.text_field :verification_code %><br>

<!--
  # Definition: The is the code of the google API in order to get access to the map 
  # on our website.
  # Input: Google API.
  # Output: Google Map.
  # Author: Heba Abdelfattah.
-->

  <script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
  <script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>  
  <div style = 'width: 800px;'>
   <div id = "multi_markers" style = 'width: 600px; height: 600px;'></div>
  </div> 

<!--
  # Definition: This builds the map, creates markers to focus the map on Egypt,
  # and changes the URL based on the latitude and longitude of the draggable marker.
  # Input: Latitude and longitude of the markers.
  # Output: Draggable marker on map.
  # Author: Heba Abdelfattah.
-->

  <script type = "text/javascript">
   var handler = Gmaps.build('Google');
   handler.buildMap({ provider: { }, internal: {id: 'multi_markers'}}, function(){
    msrkers = handler.addMarkers(<%=raw @hash.to_json %>);
    markers = handler.addMarkers([
     {lat: 32, lng: 25},
     {lat: 22, lng: 25},
     {lat: 22, lng: 35},
     {lat: 31.75, lng: 34.05},  
    ]);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    var x;
    var y;
    var url = window.location.href; 
    var urlsplit = url.split("?");
    if(urlsplit[1] != null){
     urlsplit2 = urlsplit[1].split("&");
     urlsplit3 = urlsplit2[0].split("=");
     x = urlsplit3[1];
     urlsplit4 = urlsplit2[1].split("=");
     y = urlsplit4[1];}
    else{
     x = 27;
     y = 30;
    }
   console.log(x);
   var json_data = [
    {id:  1,
     lat: x,
     lng: y,
     infowindow: "<div style='color:red;'>Your Startup</div>" 
    }
   ];
   var markers = handler.addMarkers(json_data, { draggable: true});
   _.each(json_data, function(json, index){
    json.marker = markers[index];
   });
   _.each(json_data, function(json){
    google.maps.event.addListener(json.marker.getServiceObject(), "dragend", function(event){
     var lat = event.latLng.lat();
     var lng = event.latLng.lng();
     if( lat != 27 || lng != 30){
      var url = window.location.href;
      var urlsplit = url.split("?");
      url = urlsplit[0]+"?lat="+lat+"&lng="+lng;
      var urlsplit = url.split("?");
      url = urlsplit[0]+"?lat="+lat+"&lng="+lng;
      window.location.href = url;
     }
    console.log('Marker with id: ' + json.id + ' dropped hat lat: ' + lat + ' and lng: ' + lng)
    });
   });
  });
  </script>
  <div id = "menu" style = "background-color:#949494;height:500px:width:300px:float:right;">
   <% @entity.update_attribute(:lat , params[:lat])%>
   <% @entity.update_attribute(:lng , params[:lng])%>
   <%= entity.submit "Insert" %>
  <% end %>

 <!-- 
  # Definition: If the profile is owned by the current entity and it hasn't completed its information that is based on its type, 
  # the entity is asked to fill the extra needed information.
  # Input: Void.
  # Output: Startup, investor, service params.
  # Author: Omar El Menawy.
-->

  <% elsif current_entity.type == 'Investor' && @entity.completed == nil %>
   Investor
   <%= form_for :investor, url: entity_create_investor_path(:investor, entity_id: params[:id]) do |entity| %>
    <div><%= entity.label :contact_information %>
     <%= entity.text_field :contact_information %></div><br>
    <div><%= entity.label :sector %><br />
     <%= entity.collection_select :sector, Investor::SECTORS, :to_s, :titleize %></div>

<!--
  # Definition: The is the code of the google API in order to get access to the map 
  # on our website.
  # Input: Google API.
  # Output: Google Map.
  # Author: Heba Abdelfattah.
-->

   <script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
   <script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>  
   <div style = 'width: 800px;'>
   <div id = "multi_markers" style = 'width: 600px; height: 600px;'></div>
   </div> 

<!--
  # Definition: This builds the map, creates markers to focus the map on Egypt,
  # and changes the URL based on the latitude and longitude of the draggable marker.
  # Input: Latitude and longitude of the markers.
  # Output: Draggable marker on map.
  # Author: Heba Abdelfattah.
-->

  <script type = "text/javascript">
   var handler = Gmaps.build('Google');
   handler.buildMap({ provider: { }, internal: {id: 'multi_markers'}}, function(){
    msrkers = handler.addMarkers(<%=raw @hash.to_json %>);
    markers = handler.addMarkers([
     {lat: 32, lng: 25},
     {lat: 22, lng: 25},
     {lat: 22, lng: 35},
     {lat: 31.75, lng: 34.05},  
    ]);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    var x;
    var y;
    var url = window.location.href; 
    var urlsplit = url.split("?");
    if(urlsplit[1] != null){
     urlsplit2 = urlsplit[1].split("&");
     urlsplit3 = urlsplit2[0].split("=");
     x = urlsplit3[1];
     urlsplit4 = urlsplit2[1].split("=");
     y = urlsplit4[1];}
    else{
     x = 27;
     y = 30;
    }
   console.log(x);
   var json_data = [
    {id:  1,
     lat: x,
     lng: y,
     infowindow: "<div style='color:red;'>Your Startup</div>" 
    }
   ];
   var markers = handler.addMarkers(json_data, { draggable: true});
   _.each(json_data, function(json, index){
    json.marker = markers[index];
   });
   _.each(json_data, function(json){
    google.maps.event.addListener(json.marker.getServiceObject(), "dragend", function(event){
     var lat = event.latLng.lat();
     var lng = event.latLng.lng();
     if( lat != 27 || lng != 30){
      var url = window.location.href;
      var urlsplit = url.split("?");
      url = urlsplit[0]+"?lat="+lat+"&lng="+lng;
      var urlsplit = url.split("?");
      url = urlsplit[0]+"?lat="+lat+"&lng="+lng;
      window.location.href = url;
     }
    console.log('Marker with id: ' + json.id + ' dropped hat lat: ' + lat + ' and lng: ' + lng)
    });
   });
  });
  </script>
  <div id = "menu" style = "background-color:#949494;height:500px:width:300px:float:right;">
    <% @entity.update_attribute(:lat , params[:lat])%>
    <% @entity.update_attribute(:lng , params[:lng])%>
     <%= entity.submit "Insert" %>
   <% end %>
  <% elsif current_entity.type == 'Service' && @entity.completed == nil %>
   <%= form_for :service, url: entity_create_service_path(:service, entity_id: params[:id]) do |entity| %>
    <div><%= entity.label :sector %>
     <%= entity.collection_select :sector, Service::SECTORS, :to_s, :titleize %></div>

<!--
  # Definition: The is the code of the google API in order to get access to the map 
  # on our website.
  # Input: Google API.
  # Output: Google Map.
  # Author: Heba Abdelfattah.
-->

  <script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
  <script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>  
  <div style = 'width: 800px;'>
   <div id = "multi_markers" style = 'width: 600px; height: 600px;'></div>
  </div> 

<!--
  # Definition: This builds the map, creates markers to focus the map on Egypt,
  # and changes the URL based on the latitude and longitude of the draggable marker.
  # Input: Latitude and longitude of the markers.
  # Output: Draggable marker on map.
  # Author: Heba Abdelfattah.
-->

  <script type = "text/javascript">
   var handler = Gmaps.build('Google');
   handler.buildMap({ provider: { }, internal: {id: 'multi_markers'}}, function(){
    msrkers = handler.addMarkers(<%=raw @hash.to_json %>);
    markers = handler.addMarkers([
     {lat: 32, lng: 25},
     {lat: 22, lng: 25},
     {lat: 22, lng: 35},
     {lat: 31.75, lng: 34.05},  
    ]);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    var x;
    var y;
    var url = window.location.href; 
    var urlsplit = url.split("?");
    if(urlsplit[1] != null){
     urlsplit2 = urlsplit[1].split("&");
     urlsplit3 = urlsplit2[0].split("=");
     x = urlsplit3[1];
     urlsplit4 = urlsplit2[1].split("=");
     y = urlsplit4[1];}
    else{
     x = 27;
     y = 30;
    }
   console.log(x);
   var json_data = [
    {id:  1,
     lat: x,
     lng: y,
     infowindow: "<div style='color:red;'>Your Startup</div>" 
    }
   ];
   var markers = handler.addMarkers(json_data, { draggable: true});
   _.each(json_data, function(json, index){
    json.marker = markers[index];
   });
   _.each(json_data, function(json){
    google.maps.event.addListener(json.marker.getServiceObject(), "dragend", function(event){
     var lat = event.latLng.lat();
     var lng = event.latLng.lng();
     if( lat != 27 || lng != 30){
      var url = window.location.href;
      var urlsplit = url.split("?");
      url = urlsplit[0]+"?lat="+lat+"&lng="+lng;
      var urlsplit = url.split("?");
      url = urlsplit[0]+"?lat="+lat+"&lng="+lng;
      window.location.href = url;
     }
    console.log('Marker with id: ' + json.id + ' dropped hat lat: ' + lat + ' and lng: ' + lng)
    });
   });
  });
  </script>
   <div id = "menu" style = "background-color:#949494;height:500px:width:300px:float:right;">
    <% @entity.update_attribute(:lat , params[:lat])%>
    <% @entity.update_attribute(:lng , params[:lng])%>
       <%= entity.submit "Insert" %>
   <% end %>
  <% end %>
<% end %>
<% if @entity.completed? %>
 <p>
  <strong>Name:</strong>
  <%= @entity.name %>
 </p>
 <p>
  <strong>Description:</strong>
  <%= @entity.description %>
 </p>
 <p>
  <strong>Email:</strong>
  <%= @entity.email %>
 </p>
 <p>
  <strong>Location:</strong>
  <%= @entity.location %>
 </p>
 <p>
  <strong>Headquarters:</strong>
  <%= @entity.headquarter %>
 </p>
<% end %>

<!-- 
  # Definition: This part shows a button that redirects the startup that owns this profile 
  # to its unachieved badges. If it has achieved new badges a pop up alert appears showing the badge image,
  # name, description and level. Moreover, a list of the highest level achieved badges in each category 
  # appear on the startup profile.
  # Input: @all_achieved_badges, @recently_achieved_badges, @achieved_badges, entity id.
  # Output: entity id.
  # Author: Yomn El-Mistikawy. 
-->

<% if @searching_table_startup.size != 0 %>
  <% if @entity.type == "Startup" %>
    <% if @entity == current_entity %> 
      <% if @recently_achieved_badges.size != 0 %>
        <% @recently_achieved_badges.each do |badge| %>
          <script>
            alert("Congratulations! You have achieved the badge: " + '<%= badge.name %>' + "\n Description: " + '<%= badge.description %>' + "\n Level: " + '<%= badge.level %>');
          </script>
        <% end %>
      <% end %> 
    <% end %>
    <% if @achieved_badges.size != 0 %>
      <h1> Achievements </h1>
      <% if @entity == current_entity %>
        <% if @all_achieved_badges.size != 25 %>
          <%= button_to 'View unachieved badges', entity_show_unachieved_badges_path(entity_id: params[:id]), :class => "button" %>
        <% end %>
      <% end %>
      <table>
        <tbody>
          <tr>
            <% @achieved_badges.each do |badge| %>
              <td width="22%">
                <% if badge.level == 1 %>
                  <%= image_tag "Bronze_1.gif" %>
                <% else %>
                  <% if badge.level == 2 %>
                    <%= image_tag "Silver_1.gif" %>
                  <% else %>
                    <% if badge.level == 3 %>
                      <%= image_tag "Gold_1.gif" %>
                    <% else %>
                      <%= image_tag "Platinum_1.gif" %>
                    <% end %>
                  <% end %>
                <% end %>
                <br>
                <label><font color="white">Name: </label>
                <%= badge.name %>
                <br>
                <label> Description: </label>
                <%= badge.description %>
              </td>
            <% end %>
          </tr> 
        </tbody>
      </table>
    <% end %> 
  <% end %>
>>>>>>> 6cbcd178d2f3a083d2950e21605bdfe54efe4e4c
<% end %>
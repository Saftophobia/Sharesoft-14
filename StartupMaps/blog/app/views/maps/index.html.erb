<!DOCTYPE html>
<!-- 
  # Definition: The checkboxes and the dropdown list of the sectors.
  # Input: The url of the actions.
  # Output: Checkboxes with the markers pictures and the dropdown list.
  # Author: Alia Tarek.
-->

<html>
 <%=form_for :entities  do |f| %>
  <p>
   <%= f.select :sectors, [['please select a sector...'],['Agriculture','agriculture'],['Manufacturing','manufacturing'],['Trading','trading'],['Clothes','clothes'],['Telecommunications','telecommunications']] %>
  </p>
 <% end %>
 <label><img src = "http://rideforclimate.com/nukes/all/images/orange.png">   <input type = 'checkbox'id = 'investors' onclick = 'toggleLocations(this, "/maps/1/show_investors");'>Investors</label>
 <label><img src = "http://rideforclimate.com/nukes/all/images/green.png">  <input type = 'checkbox'id = 'services' onclick = 'toggleLocations(this, "/maps/1/show_services");'>Services</label>
 <label>Startups</label>
 <label>  <img src = "http://rideforclimate.com/nukes/all/images/blue.png">  <input type = 'checkbox' id = 'online' onclick = 'toggleLocations(this, "/maps/1/show_online");'>Online Startups</label>
 <label>  <img src = "http://rideforclimate.com/nukes/all/images/red.png">  <input type = 'checkbox' id = 'offline' onclick = 'toggleLocations(this, "/maps/1/show_offline");'>Offline Startups</label>
 <label>  <img src = "http://rideforclimate.com/nukes/all/images/yellow.png">  <input type = 'checkbox' id = 'merged' onclick = 'toggleLocations(this, "/maps/1/show_merged");'>Joint Ventures</label>
 <div id = "map" style = 'width: 970px; height: 500px;'>
 </div>
</html>

<!-- 
  # Definition: The API of the map.
  # Input: Void.
  # Output: Google Map.
  # Author: Alia Tarek.
-->

<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<!-- 
  # Definition: The method that calls the markers.
  # Input: Name of the action and the id of the checkbox.
  # Output: The markers on the map.
  # Author: Alia Tarek.
-->

<script>
 var locationsMap = {};
 var x = 3;
 function toggleLocations(cb, url){
  var id= cb.id;
  if(!cb.checked){
   locationsMap[id] = [];
   buildMap();
   x = 2;
  }
  else{
   x = 10;
   url = url + "?sector=" + getSector();
   $.ajax(url)
   .done(function(data) {
    locationsMap[id] = data;
    buildMap();
    if (locationsMap[id] == "" )
    {alert("No result found")} 
   })
   .fail(function(data) {
    alert.log( "error" );
   });
  }
 };
 function getSector(){
  var skillsSelect = document.getElementById("entities_sectors");
  var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
  return selectedText;
 }
 function isChecked(id){
  if (document.getElementById(id).checked){
   return id + ',';
  }
   return '';
  }
</script>

<!-- 
  # Definition: The Mapbuilder.
  # Input: Arrays of the markers.
  # Output: Map with the markers.
  # Author: Alia Tarek.
-->

<script type = "text/javascript">
 locationsMap["investors"] = [];
 locationsMap["services"] = [];
 locationsMap["online"] = [];
 locationsMap["offline"] = [];
 locationsMap["merged"] = [];
 function buildMap (){
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
   var loc1 = locationsMap["online"]
    .concat(locationsMap["offline"]);
   var loc2 = loc1.concat(locationsMap["investors"]);
   var loc3 = loc2.concat(locationsMap["services"]);
   var loc4 = loc3.concat(locationsMap["merged"]);
   markers = handler.addMarkers(loc4);  
   handler.bounds.extendWith(markers);
   handler.fitMapToBounds();
   handler.getMap().setZoom(x);
  }); 
 }
 buildMap();
</script>
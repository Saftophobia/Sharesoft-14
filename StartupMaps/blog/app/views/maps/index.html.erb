<!DOCTYPE html>
<html>



 <%=form_for :entities  do |f| %>
    <p>
      <%= f.select :sectors, [['please select a sector...'],['Agriculture','agriculture'],['Manufacturing','manufacturing'],['Trading','trading'],['Clothes','clothes'],['Telecommunications','telecommunications']] %>
    </p>
  <% end %>
<label><img src="http://rideforclimate.com/nukes/all/images/orange.png">   <input type='checkbox'id='investors' onclick='toggleLocations(this, "/maps/1/show_investors");'>Investors</label>
<label><img src="http://rideforclimate.com/nukes/all/images/green.png">  <input type='checkbox'id='services' onclick='toggleLocations(this, "/maps/1/show_services");'>Services</label>
<label>  <img src="http://rideforclimate.com/nukes/all/images/blue.png">  <input type='checkbox' id='startups' onclick='toggleLocations(this, "/maps/1/show_startups");'>Startups</label>
<label>  <img src="http://rideforclimate.com/nukes/all/images/yellow.png">  <input type='checkbox' id='online' onclick='toggleLocations(this, "/maps/1/show_online");'>Online Startups</label>
<label>  <img src="http://rideforclimate.com/nukes/all/images/red.png">  <input type='checkbox' id='offline' onclick='toggleLocations(this, "/maps/1/show_offline");'>Offline Startups</label>
<label>  <img src="http://rideforclimate.com/nukes/all/images/pink.png">  <input type='checkbox' id='launched' onclick='toggleLocations(this, "/maps/1/show_launched");'>Launched Startups</label>
<label>  <img src="http://rideforclimate.com/nukes/all/images/white.png">  <input type='checkbox' id='not_launched' onclick='toggleLocations(this, "/maps/1/show_not_launched");'>Not Launched Startups</label>
<label>  <img src="http://rideforclimate.com/nukes/all/images/blue.png">  <input type='checkbox' id='merged' onclick='toggleLocations(this, "/maps/1/show_merged");'>Joint Ventures</label>
</div>


<div id="map" style='width: 970px; height: 500px;'>

</div>
 
</body>
</html>

<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<script>
var locationsMap = {};

function toggleLocations(cb, url){
  var id= cb.id;
  var o = "startups";

  if(!cb.checked){

    locationsMap[id] = [];

    buildMap();
  }
  else{
   
   url = url + "?sector=" + getSector();
    $.ajax(url)
      .done(function(data) {
        locationsMap[id] = data;
        if (isChecked('online') || isChecked('offline') || isChecked('launched') || isChecked('not_launched') || isChecked('merged'))
      {locationsMap[o] = []};
        buildMap();
      if (locationsMap[id] == "" && ((isChecked('online') == false || isChecked('offline') == false || isChecked(launched)== false || isChecked('not_launched')== false || isChecked('merged'))))
         {alert("No result found")}
       
        })
      .fail(function(data) {
        alert.log( "error" );
      });
    }
  };

  function getSector(){
    var skillsSelect = document.getElementById("entities_sectors");
    var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
    return selectedText;
  }

   function isChecked(id){
    if (document.getElementById(id).checked){
      return id + ',';
    }

    return '';
  }

</script>

<script type = "text/javascript">

locationsMap["startups"] = [];
locationsMap["investors"] = [];
locationsMap["services"] = [];
locationsMap["online"] = [];
locationsMap["offline"] = [];
locationsMap["launched"] = [];
locationsMap["not_launched"] = [];
locationsMap["merged"] = [];

function buildMap (){

  handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){

    var loc1 = locationsMap["startups"]
      .concat(locationsMap["investors"]);

  var loc2 = loc1.concat(locationsMap["services"]);

  var loc3 = loc2.concat(locationsMap["online"]);

  var loc4 = loc3.concat(locationsMap["offline"]);
      var loc5 = loc4.concat(locationsMap["launched"]);
      var loc6 = loc5.concat(locationsMap["not_launched"]);
      var loc7 = loc6.concat(locationsMap["merged"]);

    markers = handler.addMarkers(loc7);
    
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    handler.getMap().setZoom(2);
  }); 
}
buildMap();
</script>
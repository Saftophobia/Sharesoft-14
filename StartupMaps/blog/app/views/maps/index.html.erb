<script>
var locationsMap = {};

function toggleLocations(cb, url){
  var id= cb.id;
  if(!cb.checked){
    locationsMap[id] = [];
    buildMap();
  }
  else{

 url = url + "?checked=" + getChecked() + "&type=" + getSector() + "&status=" + getOnlineOffline() + "&Lstatus=" + getLanchedNotLaunched();
      alert(url);

    $.ajax(url)
      .done(function(data) {
        locationsMap[id] = data;
        buildMap();
      })
<!-- 
  # Definition: The API of the map.
  # Input: Void.
  # Output: Google Map.
  # Author: Alia Tarek.
-->

<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>


<!-- 
  # Definition: The method that calls the markers.
  # Input: Name of the action and the id of the checkbox.
  # Output: The markers on the map.
  # Author: Alia Tarek.
-->

<script>
  var locationsMap = {};
  function toggleLocations(cb, url){
    var id = cb.id;
    if(!cb.checked){
      locationsMap[id] = [];
      buildMap();
      }
    else{
      $.ajax(url)
      .done(function(data) {
        locationsMap[id] = data;
        buildMap();
         if (locationsMap[id] == "")
        {alert("No result found")}
       })
      .fail(function(data) {
        alert.log( "error" );
      });
    }
  };

  function getSector(){
    var skillsSelect = document.getElementById("entities_sectors");
    var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
    return selectedText;
  }

   function getOnlineOffline(){
    var query = isChecked('online') 
      + isChecked('offline');

      return query;
  }

 function getLanchedNotLaunched(){
    var query = isChecked('launched') 
      + isChecked('notLaunched');

      return query;
  }

   function isChecked(id){
    if (document.getElementById(id).checked){
      return id + ',';
    }

    return '';
  }

    function getChecked(){
    var query = isChecked('startups') 
      + isChecked('investors');

      return query;
      //ne7ot el ba2i
  }



</script>

<h1>Startup Map</h1>



<form action="">

<input type="radio" id="online" name="status" value="online">Online<br>
<input type="radio" id="offline" name="status" value="offline">Offline<br>

</form>
<form action="">
<input type="radio" id="launched" name="Lstatus" value="launched">launched<br>
<input type="radio" id="notLaunched" name="Lstatus" value="notlLaunched">not launched
 

<br>
 <%=form_for :entities  do |f| %>
    <p>
      <%= f.select :sectors, [['Agriculture','agriculture'],['Manufacturing','manufacturing'],['Trading','trading'],['Clothes','clothes'],['Telecommunications','telecommunications']] %>
    </p>

  <% end %>
</script>


<!-- 
  # Definition: The checkboxes.
  # Input: The url of the actions.
  # Output: Checkboxes with the markers pictures.
  # Author: Alia Tarek.
-->

<h1>Startup Map</h1>
<h1 align=right>
<label>  <img src="http://rideforclimate.com/nukes/all/images/blue.png">  <input type='checkbox' id='startups' onclick='toggleLocations(this, "/maps/1/show_startups");'>Startups</label><br>
<label><img src="http://rideforclimate.com/nukes/all/images/orange.png">   <input type='checkbox'id='investors' onclick='toggleLocations(this, "/maps/1/show_investors");'>Investors</label><br>
<label><img src="http://rideforclimate.com/nukes/all/images/green.png">  <input type='checkbox'id='services' onclick='toggleLocations(this, "/maps/1/show_services");'>Services</label></h1>

<div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>
</div>


<!-- 
  # Definition: The Mapbuilder.
  # Input: Arrays of the markers.
  # Output: Map with the markers.
  # Author: Alia Tarek.
-->
 
<script type = "text/javascript">
  locationsMap["startups"] = [];
  locationsMap["investors"] = [];
  locationsMap["services"] = [];
  function buildMap (){
    handler = Gmaps.build('Google');
    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    var loc1 = locationsMap["startups"]
      .concat(locationsMap["investors"]);
    var loc2 = loc1.concat(locationsMap["services"]);
    markers = handler.addMarkers(loc2);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    handler.getMap().setZoom(2);
  }); 
}
  buildMap();
</script>